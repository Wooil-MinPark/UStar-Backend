name: Spring Boot CI/CD

on:
  push:
    branches:
      - 'main'
      - 'develop'
      - 'feat/**'
    tags:
      - 'v*'
  pull_request:
    branches:
      - 'develop'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag for the Docker image'
        required: true

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: ‚öôÔ∏è Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: üìù Create and verify application-dev.properties
        run: |
          # For main resources
          cat << EOF > src/main/resources/application-dev.properties
          ${{secrets.APPLICATION_PROPERTIES}}
          EOF

          echo "Contents of src/main/resources/application-dev.properties:"
          cat src/main/resources/application-dev.properties | sed 's/^/    /'

          echo "File size of application-dev.properties:"
          ls -l src/main/resources/application-dev.properties | awk '{print $5}'

          echo "Number of lines in application-dev.properties:"
          wc -l < src/main/resources/application-dev.properties

      - name: üìï Grant execute permission for gradlew
        run: chmod +x gradlew

#      - name: ‚è∞ Start MySQL
#        run: |
#          docker run --name mysql -e MYSQL_ROOT_PASSWORD=${{ secrets.DB_PASSWORD }} -e MYSQL_DATABASE=${{ secrets.DB_NAME }} -e MYSQL_USER=${{ secrets.DB_USERNAME }} -e MYSQL_PASSWORD=${{ secrets.DB_PASSWORD }} -p 3306:3306 -d mysql:8.0
#
#      - name: ‚úÖ MySQL Health Check
#        run: |
#          echo "Waiting for MySQL to be ready..."
#          for i in {1..60}; do
#            if docker exec mysql mysqladmin ping -h localhost -u${{ secrets.DB_USERNAME }} -p${{ secrets.DB_PASSWORD }} --silent; then
#              echo "MySQL is ready!"
#              break
#            fi
#            echo "Attempt $i: MySQL is not ready yet. Waiting..."
#            sleep 10
#          done
#          if [ $i -eq 60 ]; then
#            echo "MySQL did not become ready in time."
#            exit 1
#          fi
#
#      - name: ‚úÖ Verify MySQL Connection
#        run: |
#          echo "Verifying MySQL connection..."
#          docker exec mysql mysql -u${{ secrets.DB_USERNAME }} -p${{ secrets.DB_PASSWORD }} -e "SHOW DATABASES;"
#
#      - name: ‚úÖ Print Database Connection Info
#        run: |
#          echo "Database connection info:"
#          echo "URL: jdbc:mysql://localhost:3306/${{ secrets.DB_NAME }}?useSSL=false&serverTimezone=UTC"
#          echo "Username: ${{ secrets.DB_USERNAME }}"
#          echo "Password: [PROTECTED]"

      - name: Copy main resources to test resources
        run: |
          mkdir -p src/test/resources
          cp src/main/resources/application*.properties src/test/resources/
          echo "Contents of src/test/resources directory:"
          ls -la src/test/resources
          echo "Contents of application-dev.properties:"
          cat src/test/resources/application-dev.properties || echo "File not found"
#
#      - name: üî• Run tests
#        run: |
#          ./gradlew test --info
#        env:
#          SPRING_DATASOURCE_URL: jdbc:mysql://localhost:3306/${{ secrets.DB_NAME }}?useSSL=false&serverTimezone=UTC
#          SPRING_DATASOURCE_USERNAME: ${{ secrets.DB_USERNAME }}
#          SPRING_DATASOURCE_PASSWORD: ${{ secrets.DB_PASSWORD }}
#
#      - name: üõ†Ô∏è Build with Gradle
#        run: ./gradlew build
#
#      - name: ‚öôÔ∏è Set Docker image tag
#        id: set_tag
#        run: |
#          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
#            echo "IMAGE_TAG=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
#          elif [[ $GITHUB_REF == refs/tags/* ]]; then
#            echo "IMAGE_TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
#          else
#            echo "IMAGE_TAG=${{ github.sha }}" >> $GITHUB_OUTPUT
#          fi
#
#      - name: üõ†Ô∏è Build Docker image
#        run: |
#          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/ustar:${{ steps.set_tag.outputs.IMAGE_TAG }} .
#          docker tag ${{ secrets.DOCKERHUB_USERNAME }}/ustar:${{ steps.set_tag.outputs.IMAGE_TAG }} ${{ secrets.DOCKERHUB_USERNAME }}/ustar:latest
#
#      - name: Login to Docker Hub
#        uses: docker/login-action@v2
#        with:
#          username: ${{ secrets.DOCKERHUB_USERNAME }}
#          password: ${{ secrets.DOCKERHUB_TOKEN }}
#
#      - name: üöÄ Push Docker image
#        run: |
#          docker push ${{ secrets.DOCKERHUB_USERNAME }}/ustar:${{ steps.set_tag.outputs.IMAGE_TAG }}
#          docker push ${{ secrets.DOCKERHUB_USERNAME }}/ustar:latest